process {
  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  maxRetries = 3
  maxErrors = '-1'

  errorStrategy = 'retry' 
  
  // Process-specific resource requirements
  withName: TRAIN_UP_MODEL {
    errorStrategy = {task.attempt <= 3 ? 'retry' : 'ignore'}
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: TRAIN_DOWN_MODEL {
    errorStrategy = {task.attempt <= 3 ? 'retry' : 'ignore'}
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: TRAIN_SMOTE_MODEL {
    errorStrategy = {task.attempt <= 3 ? 'retry' : 'ignore'}
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: TRAIN_ROSE_MODEL {
    errorStrategy = {task.attempt <= 3 ? 'retry' : 'ignore'}
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: TRAIN_MODEL {
    errorStrategy = {task.attempt <= 3 ? 'retry' : 'ignore'}
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }

}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 16
  max_time = 120.h
}


def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
